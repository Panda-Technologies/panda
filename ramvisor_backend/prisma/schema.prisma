// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  engineType      = "binary"
}

generator nexusPrisma {
  provider   = "nexus-prisma"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String          @id @default(uuid())
  email                          String          @unique
  password                       String
  university                     String?
  yearInUniversity               Int?
  degreeId                       Int?
  currentSemesterScheduleId      Int?
  gpa                            Float?
  attendancePercentage           Float?
  assignmentCompletionPercentage Float?
  tasks                          Task[]
  classSchedule                  ClassSchedule[]
  degreePlanners                 DegreePlanner[]
  degree                         Degree?         @relation(fields: [degreeId], references: [id])

  @@map("users")
}

model Task {
  id          Int     @id @unique @default(autoincrement())
  userId      String
  dueDate     String?
  stageId     Int
  classCode   String?
  description String?
  title       String
  user        User    @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model ClassSchedule {
  id         Int                  @id @unique @default(autoincrement())
  userId     String
  semesterId String
  user       User                 @relation(fields: [userId], references: [id])
  entries    ClassScheduleEntry[]

  @@map("class_schedules")
}

model ClassScheduleEntry {
  id              Int           @id @unique @default(autoincrement())
  classScheduleId Int
  classId         Int
  classSchedule   ClassSchedule @relation(fields: [classScheduleId], references: [id])
  class           Class         @relation(fields: [classId], references: [id])

  @@map("class_schedule_entries")
}

model Class {
  id                    Int                  @id @unique @default(autoincrement())
  classCode             String
  credits               Int
  description           String
  courseType            String
  title                 String
  dayOfWeek             String
  startTime             DateTime
  endTime               DateTime
  color                 String
  professor             String
  rateMyProfessorRating Float
  coreDegreeId          Int
  electiveDegreeId      Int[]
  classScheduleEntries  ClassScheduleEntry[]
  SemesterEntries       SemesterEntry[]

  @@map("classes")
}

model DegreePlanner {
  id       Int        @id @unique @default(autoincrement())
  userId   String
  degreeId Int
  user     User       @relation(fields: [userId], references: [id])
  degree   Degree     @relation(fields: [degreeId], references: [id])
  Semester Semester[]

  @@map("degree_planners")
}

model Semester {
  id            Int             @id @unique @default(autoincrement())
  degreeId      Int
  name          String
  credits       Int
  plannerId     Int
  entries       SemesterEntry[]
  degreePlanner DegreePlanner   @relation(fields: [plannerId], references: [id])

  @@map("semesters")
}

model SemesterEntry {
  id         Int      @id @unique @default(autoincrement())
  semesterId Int
  classId    Int
  index      Int
  Semester   Semester @relation(fields: [semesterId], references: [id])
  class      Class    @relation(fields: [classId], references: [id])

  @@map("semester_entries")
}

model Degree {
  id                Int             @id @unique @default(autoincrement())
  name              String
  numberOfCores     Int
  numberOfElectives Int
  degreePlanners    DegreePlanner[]
  user              User[]

  @@map("degrees")
}
