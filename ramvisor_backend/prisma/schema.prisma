// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             Int              @id @default(autoincrement())
  email                          String           @unique
  password                       String
  university                     String?
  yearInUniversity               Int?
  degreeId                       Int?
  currentSemesterScheduleId      Int?
  gpa                            Float?
  attendancePercentage           Float?
  assignmentCompletionPercentage Float?
  tasks                          Task[]
  classSchedule                  ClassSchedule[]
  degreeSchedule                 DegreeSchedule[]
  degree                         Degree?           @relation(fields: [degreeId], references: [id])
  @@map("users")
}


model Task {
  id          Int      @id @default(autoincrement())
  userId      Int
  dueDate     String
  stageId     Int
  classCode   String
  description String
  title       String
  user        User     @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model ClassSchedule {
  id         Int   @id @default(autoincrement())
  userId     Int
  semesterId Int
  classId    Int
  user       User  @relation(fields: [userId], references: [id])
  class      Class @relation(fields: [classId], references: [id])

  @@map("class_schedules")
}

model Class {
  id                    Int             @id @default(autoincrement())
  classCode             String          @unique
  courseType            String
  title                 String
  dayOfWeek             String
  startTime             DateTime
  endTime               DateTime
  color                 String
  professor             String
  rateMyProfessorRating Float
  coreDegreeId          Int
  classSchedules        ClassSchedule[]

  @@map("classes")
}

model DegreeSchedule {
  id         Int    @id @default(autoincrement())
  userId     Int
  plannerId  Int
  degreeId   Int
  semesterId Int
  courseId   Int
  user       User   @relation(fields: [userId], references: [id])
  degree     Degree @relation(fields: [degreeId], references: [id])

  @@map("degree_schedules")
}

model Degree {
  id                Int              @id @default(autoincrement())
  name              String           // Add this line
  numberOfCores     Int
  numberOfElectives Int
  degreeSchedules   DegreeSchedule[]
  user              User[]

  @@map("degrees")
}