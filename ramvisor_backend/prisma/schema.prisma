// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  engineType      = "binary"
}

generator nexusPrisma {
  provider   = "nexus-prisma"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                             String          @id @default(uuid())
  email                          String          @unique
  password                       String
  university                     String?
  yearInUniversity               Int?
  isPremium                      Boolean
  graduationSemesterName         String?
  gpa                            Float?
  attendancePercentage           Float?
  assignmentCompletionPercentage Float?
  tasks                          task[]
  classSchedules                 classSchedule[]
  degreePlanners                 degreePlanner[]
  takenClassIds                  Int[]
  degrees                        degree[]
  questionnaireCompleted         Boolean         @default(false)

  classes        classSection[]
  completedTasks completedTasks[]

  @@map("users")
}

model task {
  id          Int     @id @unique @default(autoincrement())
  userId      String
  dueDate     String?
  stageId     Int
  classCode   String?
  description String?
  source      String // 'canvas' or 'app'
  title       String
  user        user    @relation(fields: [userId], references: [id])

  @@index([userId, classCode, title])
  @@map("tasks")
}

model completedTasks {
  id          Int      @id @default(autoincrement())
  userId      String
  classCode   String
  title       String
  completedAt DateTime @default(now())
  source      String // 'canvas' or 'app'
  user        user     @relation(fields: [userId], references: [id])

  @@unique([userId, classCode, title])
  @@index([userId, completedAt])
  @@map("completed_tasks")
}

model classSchedule {
  id         Int                  @id @unique @default(autoincrement())
  title      String?
  userId     String
  semesterId String
  isCurrent  Boolean?
  user       user                 @relation(fields: [userId], references: [id])
  entries    classScheduleEntry[]

  @@map("class_schedules")
}

model classScheduleEntry {
  id              Int           @id @unique @default(autoincrement())
  classScheduleId Int
  classId         Int
  sectionId       Int
  classSchedule   classSchedule @relation(fields: [classScheduleId], references: [id])
  class           Class         @relation(fields: [classId], references: [id])

  @@map("class_schedule_entries")
}

model Class {
  id               Int                  @id @unique @default(autoincrement())
  classCode        String
  credits          Int
  category         String
  description      String
  courseType       String
  title            String
  color            String
  ideaGenEd        String[]
  prerequisites    String[]
  coreDegreeId     Int[]
  electiveDegreeId Int[]
  sections         classSection[]
  semesterEntries  semesterEntry[]
  scheduleEntries  classScheduleEntry[]

  @@map("classes")
}

model classSection {
  id                    Int      @id @unique @default(autoincrement())
  classId               Int
  section               Int
  professor             String
  rateMyProfessorRating Float
  dayOfWeek             String
  startTime             String
  totalAvailable        Int
  totalCapacity         Int
  location              String
  endTime               String
  class                 Class    @relation(fields: [classId], references: [id])
  user                  user[]
  userId                String[]

  @@map("class_sections")
}

model requirement {
  id         Int      @id @unique @default(autoincrement())
  degreeId   Int
  reqType    String
  category   String
  classIds   Int[]
  classNames String[]

  @@map("requirements")
}

model GenEdCategory {
  id           Int                @id @default(autoincrement())
  name         String
  requirements GenEdRequirement[]

  @@map("gen_ed_categories")
}

model GenEdRequirement {
  id         Int           @id @default(autoincrement())
  code       String
  name       String
  hours      String
  categoryId Int
  category   GenEdCategory @relation(fields: [categoryId], references: [id])

  subTypes String[]

  @@map("gen_ed_requirements")
}

model degreePlanner {
  id       Int        @id @default(autoincrement())
  userId   String
  title    String
  degreeId Int
  user     user       @relation(fields: [userId], references: [id])
  degree   degree     @relation(fields: [degreeId], references: [id])
  semester semester[]

  @@map("degree_planners")
}

model semester {
  id            Int             @id @unique @default(autoincrement())
  degreeId      Int
  name          String
  credits       Int
  plannerId     Int
  entries       semesterEntry[]
  degreePlanner degreePlanner   @relation(fields: [plannerId], references: [id])

  @@map("semesters")
}

model semesterEntry {
  id         Int      @id @unique @default(autoincrement())
  semesterId Int
  classId    Int
  semester   semester @relation(fields: [semesterId], references: [id])
  class      Class    @relation(fields: [classId], references: [id])

  @@map("semester_entries")
}

model degree {
  id                 Int             @id @unique @default(autoincrement())
  name               String
  type               String
  coreCategories     String[]
  electiveCategories String[]
  gatewayCategories  String[]
  numberOfCores      Float
  numberOfElectives  Float
  degreePlanners     degreePlanner[]
  user               user[]

  @@map("degrees")
}

model chatHistory {
  id          Int         @id @unique @default(autoincrement())
  role        String
  content     String
  classes     Int[]
  sections    Int[]
  chatSession chatSession @relation(fields: [id], references: [id])
}

model chatSession {
  id          Int           @id @unique @default(autoincrement())
  chatHistory chatHistory[]
}
