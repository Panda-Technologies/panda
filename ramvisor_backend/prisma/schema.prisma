// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  engineType      = "binary"
}

generator nexusPrisma {
  provider   = "nexus-prisma"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                             String          @id @default(uuid())
  email                          String          @unique
  password                       String
  university                     String?
  yearInUniversity               Int?
  degreeId                       Int?
  isPremium                      Boolean
  graduationSemesterName         String?
  gpa                            Float?
  attendancePercentage           Float?
  assignmentCompletionPercentage Float?
  tasks                          task[]
  classSchedule                  classSchedule[]
  degreePlanners                 degreePlanner[]
  takenClassIds                  Int[]
  degree                         degree?         @relation(fields: [degreeId], references: [id])
  questionnaireCompleted         Boolean         @default(false)

  // New: Relation to the Class model (many-to-many)
  classes classSection[]

  @@map("users")
}

model task {
  id          Int     @id @unique @default(autoincrement())
  userId      String
  dueDate     String?
  stageId     Int
  classCode   String?
  description String?
  title       String
  user        user    @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model classSchedule {
  id         Int                  @id @unique @default(autoincrement())
  userId     String
  semesterId String
  user       user                 @relation(fields: [userId], references: [id])
  entries    classScheduleEntry[]

  @@map("class_schedules")
}

model classScheduleEntry {
  id              Int           @id @unique @default(autoincrement())
  classScheduleId Int
  classId         Int
  classSchedule   classSchedule @relation(fields: [classScheduleId], references: [id])
  class           Class         @relation(fields: [classId], references: [id])

  @@map("class_schedule_entries")
}

model Class {
  id                   Int                  @id @unique @default(autoincrement())
  classCode            String
  credits              Int
  category             String
  description          String
  courseType           String
  title                String
  color                String
  coreDegreeId         Int[]
  electiveDegreeId     Int[]
  sections             classSection[]
  classScheduleEntries classScheduleEntry[]
  semesterEntries      semesterEntry[]

  @@map("classes")
}

model classSection {
  id                    Int      @id @unique @default(autoincrement())
  classId               Int
  section               Int
  professor             String
  rateMyProfessorRating Float
  dayOfWeek             String
  startTime             String
  endTime               String
  class                 Class    @relation(fields: [classId], references: [id])
  user                  user[]
  userId                String[]

  @@map("class_sections")
}

model requirement {
  id         Int     @id @unique @default(autoincrement())
  degreeId   Int
  isElective Boolean
  category   String
  classIds   Int[]

  @@map("requirements")
}

model degreePlanner {
  id       Int        @id @default(autoincrement())
  userId   String
  title    String
  degreeId Int
  user     user       @relation(fields: [userId], references: [id])
  degree   degree     @relation(fields: [degreeId], references: [id])
  semester semester[]

  @@map("degree_planners")
}

model semester {
  id            Int             @id @unique @default(autoincrement())
  degreeId      Int
  name          String
  credits       Int
  plannerId     Int
  entries       semesterEntry[]
  degreePlanner degreePlanner   @relation(fields: [plannerId], references: [id])

  @@map("semesters")
}

model semesterEntry {
  id         Int      @id @unique @default(autoincrement())
  semesterId Int
  classId    Int
  semester   semester @relation(fields: [semesterId], references: [id])
  class      Class    @relation(fields: [classId], references: [id])

  @@map("semester_entries")
}

model degree {
  id                 Int             @id @unique @default(autoincrement())
  name               String
  coreCategories     String[]
  electiveCategories String[]
  numberOfCores      Int
  numberOfElectives  Int
  degreePlanners     degreePlanner[]
  user               user[]

  @@map("degrees")
}
