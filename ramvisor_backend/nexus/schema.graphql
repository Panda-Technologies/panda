### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Class {
  category: String!
  classCode: String!
  classSchedules: [classSchedule]
  color: String!
  coreDegreeId: [Int]!
  courseType: String!
  credits: Int!
  dayOfWeek: String!
  description: String!
  electiveDegreeId: [Int]
  endTime: String!
  id: Int!
  professor: String!
  rateMyProfessorRating: Float!
  startTime: String!
  title: String!
}

input CreateClassInput {
  category: String!
  classCode: String!
  color: String!
  coreDegreeId: Int!
  courseType: String!
  credits: Int!
  dayOfWeek: String!
  description: String!
  electiveDegreeId: [Int]!
  endTime: String!
  professor: String!
  rateMyProfessorRating: Float!
  startTime: String!
  title: String!
}

input CreateRequirementInput {
  category: String!
  classIds: [Int]!
  degreeId: Int!
  isElective: Boolean!
}

input DegreePlannerDegreeInput {
  degreeId: Int!
  title: String!
  userId: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addClassToClassSchedule(input: addClassToScheduleInput!): classScheduleEntry
  addClassTosemester(input: addClassToSemesterInput!): semesterEntry
  createClass(input: CreateClassInput!): Class
  createClassSchedule(input: createClassScheduleInput!): classSchedule
  createDegree(input: createDegreeInput!): degree
  createDegreePlanner(input: createDegreePlannerInput!): degreePlanner
  createDegreeRequirements(degreeId: Int!): Boolean
  createRequirement(data: CreateRequirementInput!): requirement
  createSemester(input: createSemesterInput!): semester
  createTask(input: createTaskInput): task
  deleteClass(input: deleteClassInput!): Class
  deleteClassSchedule(id: Int!): classSchedule
  deleteDegree(input: deleteDegreeInput!): degree
  deleteDegreePlanner(id: Int!): degreePlanner
  deleteSemester(id: Int!): semester
  deleteTask(input: deleteTaskInput): task
  generateClassesFromScrape: Class
  login(input: LoginInput!): String
  logout: Boolean
  register(input: RegisterInput!): String
  removeClassFromClassSchedule(input: removeClassFromScheduleInput!): classScheduleEntry
  removeClassFromSemester(input: removeClassFromSemesterInput!): semesterEntry
  resetDegreePlanner(input: resetDegreePlannerInput!): degreePlanner
  setUserGraduationSemester(input: graduationSemesterInput!): user
  updateClass(input: UpdateClassInput!): Class
  updateClassSchedule(input: updateClassScheduleInput!): classSchedule
  updateDegree(input: updateDegreeInput!): degree
  updatePremiumStatus(id: String!, isPremium: Boolean!): user
  updateRequirement(data: UpdateRequirementInput!): requirement
  updateSemester(input: updateSemesterInput!): semester
  updateTask(input: updateTaskInput): task
  updateUserAcademicInfo(assignmentCompletionPercentage: Float, attendancePercentage: Float, gpa: Float, id: String!, takenClassIds: [Int]): user
  updateUserProfile(degreeId: Int!, id: String!, university: String!, yearInUniversity: Int!): user
}

type Query {
  classTaken(input: classTakenInput!): classTakenResult
  getAlldegrees: [degree]
  getClass(id: Int!): Class
  getClassScheduleEntries(classScheduleId: Int!): [classScheduleEntry]
  getClasses: [Class]
  getDegree(userId: String!): degree
  getGraduationSemester(id: String!): String
  getPremiumStatus(id: String!): Boolean
  getRequirement(category: String!, degreeId: Int!): [requirement]
  getRequirements(degreeId: Int!): [requirement]
  getSemester(id: Int!): semester
  getTasks(userId: String!): [task]
  getUser(id: String!): user
  getclassSchedules(userId: String!): [classSchedule]
  getdegreePlanners(userId: String!): [degreePlanner]
  getsemesters(plannerId: Int!): [semester]
}

input RegisterInput {
  email: String!
  password: String!
}

input UpdateClassInput {
  category: String
  classCode: String
  color: String
  coreDegreeId: Int
  courseType: String
  credits: Int
  dayOfWeek: String
  description: String
  electiveDegreeId: [Int]
  endTime: String
  id: Int!
  professor: String
  rateMyProfessorRating: Float
  startTime: String
  title: String
}

input UpdateRequirementInput {
  category: String
  classIds: [Int]
  degreeId: Int
  id: Int!
  isElective: Boolean
}

input addClassToScheduleInput {
  classId: Int!
  classScheduleId: Int!
}

input addClassToSemesterInput {
  classId: Int!
  semesterId: Int!
}

type classSchedule {
  entries: [classScheduleEntry]
  id: Int!
  semesterId: String!
  user: user
  userId: String!
}

type classScheduleEntry {
  class: Class
  classId: Int!
  classSchedule: classSchedule
  classScheduleId: Int!
  id: Int!
}

input classTakenInput {
  id: String!
}

type classTakenResult {
  classIds: [Int]!
}

input createClassScheduleInput {
  semesterId: String!
  userId: String!
}

input createDegreeInput {
  coreCategories: [String]!
  electiveCategories: [String]!
  name: String!
  numberOfCores: Int!
  numberOfElectives: Int!
}

input createDegreePlannerInput {
  degree: DegreePlannerDegreeInput!
}

input createSemesterInput {
  classIds: [Int]
  degreeId: Int!
  name: String!
  plannerId: Int!
}

input createTaskInput {
  task: taskInputFields
}

type degree {
  coreCategories: [String]!
  electiveCategories: [String]!
  id: Int!
  name: String!
  numberOfCores: Int!
  numberOfElectives: Int!
  semesters: [semester]
  users: [user]
}

type degreePlanner {
  degree: degree
  degreeId: Int!
  id: Int!
  semester: [semester]
  title: String!
  user: user
  userId: String!
}

input deleteClassInput {
  id: Int!
}

input deleteDegreeInput {
  id: Int!
}

input deleteTaskInput {
  id: Int!
}

input graduationSemesterInput {
  id: String!
  semesterName: String!
  year: Int!
}

input removeClassFromScheduleInput {
  id: Int!
}

input removeClassFromSemesterInput {
  classId: Int!
  semesterId: Int!
}

type requirement {
  category: String!
  classIds: [Int]!
  degreeId: Int!
  id: Int!
  isElective: Boolean!
}

input resetDegreePlannerInput {
  id: Int!
}

type semester {
  credits: Int!
  degreeId: Int!
  degreePlanner: degreePlanner
  entries: [semesterEntry]
  id: Int!
  name: String!
  plannerId: Int!
}

type semesterEntry {
  class: Class
  classId: Int!
  id: Int!
  semester: semester
  semesterId: Int!
}

input semesterEntryInput {
  classId: Int!
}

type task {
  classCode: String
  description: String
  dueDate: String!
  id: Int!
  stageId: Int!
  title: String!
  user: user
  userId: String!
}

input taskInputFields {
  classCode: String
  description: String
  dueDate: String!
  stageId: Int
  title: String!
  userId: String!
}

input updateClassScheduleInput {
  id: Int!
  semesterId: String
}

input updateDegreeInput {
  coreCategories: [String]
  electiveCategories: [String]
  id: Int!
  name: String
  numberOfCores: Int
  numberOfElectives: Int
}

input updateSemesterInput {
  entries: [semesterEntryInput!]
  id: Int!
  name: String
}

input updateTaskFields {
  classCode: String
  description: String
  dueDate: String
  id: Int!
  stageId: Int
  title: String
}

input updateTaskInput {
  id: Int!
  update: updateTaskFields
}

type user {
  assignmentCompletionPercentage: Float
  attendancePercentage: Float
  classSchedules: [classSchedule]
  degree: degree
  degreeId: Int
  degreePlanners: [degreePlanner]
  email: String!
  gpa: Float
  graduationSemesterName: String
  id: String!
  isPremium: Boolean
  takenClassIds: [Int]
  tasks: [task]
  university: String
  yearInUniversity: Int
}