### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddClassToDegreeScheduleInput {
  classId: Int!
  degreeScheduleId: Int!
}

input AddClassToScheduleInput {
  classId: Int!
  classScheduleId: Int!
}

type Class {
  classCode: String!
  classSchedules: [ClassSchedule]
  color: String!
  coreDegreeId: Int!
  courseType: String!
  credits: Int!
  dayOfWeek: String!
  electiveDegreeId: [Int]
  endTime: String!
  id: Int!
  professor: String!
  rateMyProfessorRating: Float!
  startTime: String!
  title: String!
}

type ClassSchedule {
  entries: [ClassScheduleEntry]
  id: Int!
  semesterId: String!
  user: User
  userId: String!
}

type ClassScheduleEntry {
  class: Class
  classId: Int!
  classSchedule: ClassSchedule
  classScheduleId: Int!
  id: Int!
}

input CreateClassInput {
  classCode: String!
  color: String!
  coreDegreeId: Int!
  courseType: String!
  credits: Int!
  dayOfWeek: String!
  electiveDegreeId: [Int]!
  endTime: String!
  professor: String!
  rateMyProfessorRating: Float!
  startTime: String!
  title: String!
}

input CreateClassScheduleInput {
  semesterId: String!
  userId: String!
}

input CreateDegreeInput {
  name: String!
  numberOfCores: Int!
  numberOfElectives: Int!
}

input CreateDegreePlannerInput {
  degreeId: Int!
  userId: String!
}

input CreateDegreeScheduleInput {
  degreeId: Int!
  plannerId: Int!
  semesterId: String!
}

input CreateTaskInput {
  task: TaskInputFields
}

type Degree {
  degreeSchedules: [DegreeSchedule]
  id: Int!
  name: String!
  numberOfCores: Int!
  numberOfElectives: Int!
  users: [User]
}

type DegreePlanner {
  degree: Degree
  degreeId: Int!
  degreeSchedule: [DegreeSchedule]
  id: Int!
  user: User
  userId: String!
}

type DegreeSchedule {
  degreeId: Int!
  degreePlanner: DegreePlanner
  entries: [DegreeScheduleEntry]
  id: Int!
  plannerId: Int!
  semesterId: String!
}

type DegreeScheduleEntry {
  class: Class
  classId: Int!
  degreeSchedule: DegreeSchedule
  degreeScheduleId: Int!
  id: Int!
}

input DeleteClassInput {
  id: Int!
}

input DeleteDegreeInput {
  id: Int!
}

input DeleteTaskInput {
  id: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addClassToClassSchedule(input: AddClassToScheduleInput!): ClassScheduleEntry
  addClassToDegreeSchedule(input: AddClassToDegreeScheduleInput!): DegreeScheduleEntry
  createClass(input: CreateClassInput!): Class
  createClassSchedule(input: CreateClassScheduleInput!): ClassSchedule
  createDegree(input: CreateDegreeInput!): Degree
  createDegreePlanner(input: CreateDegreePlannerInput!): DegreePlanner
  createDegreeSchedule(input: CreateDegreeScheduleInput!): DegreeSchedule
  createTask(input: CreateTaskInput): Task
  deleteClass(input: DeleteClassInput!): Class
  deleteClassSchedule(id: Int!): ClassSchedule
  deleteDegree(input: DeleteDegreeInput!): Degree
  deleteDegreePlanner(id: Int!): DegreePlanner
  deleteDegreeSchedule(id: Int!): DegreeSchedule
  deleteTask(input: DeleteTaskInput): Task
  login(input: LoginInput!): String
  logout: Boolean
  register(input: RegisterInput!): String
  removeClassFromClassSchedule(input: RemoveClassFromScheduleInput!): ClassScheduleEntry
  removeClassFromDegreeSchedule(input: RemoveClassFromDegreeScheduleInput!): DegreeScheduleEntry
  updateClass(input: UpdateClassInput!): Class
  updateClassSchedule(input: UpdateClassScheduleInput!): ClassSchedule
  updateDegree(input: UpdateDegreeInput!): Degree
  updateDegreeSchedule(input: UpdateDegreeScheduleInput!): DegreeSchedule
  updateTask(input: UpdateTaskInput): Task
  updateUserAcademicInfo(assignmentCompletionPercentage: Float, attendancePercentage: Float, gpa: Float, id: String!): User
  updateUserProfile(degreeId: Int!, id: String!, university: String!, yearInUniversity: Int!): User
}

type Query {
  getAllDegrees: [Degree]
  getClass(id: Int!): Class
  getClassScheduleEntries(classScheduleId: Int!): [ClassScheduleEntry]
  getClassSchedules(userId: String!): [ClassSchedule]
  getClasses: [Class]
  getDegree(id: Int!): Degree
  getDegreePlanners(userId: String!): [DegreePlanner]
  getDegreeScheduleEntries(degreeScheduleId: Int!): [DegreeScheduleEntry]
  getDegreeSchedules(plannerId: Int!): [DegreeSchedule]
  getTasks(userId: String!): [Task]
  getUser(id: String!): User
}

input RegisterInput {
  email: String!
  password: String!
}

input RemoveClassFromDegreeScheduleInput {
  id: Int!
}

input RemoveClassFromScheduleInput {
  id: Int!
}

type Task {
  classCode: String
  description: String
  dueDate: String!
  id: Int!
  stageId: Int!
  title: String!
  user: User
  userId: String!
}

input TaskInputFields {
  classCode: String
  description: String
  dueDate: String!
  stageId: Int
  title: String!
  userId: String!
}

input UpdateClassInput {
  classCode: String
  color: String
  coreDegreeId: Int
  courseType: String
  credits: Int
  dayOfWeek: String
  electiveDegreeId: [Int]
  endTime: String
  id: Int!
  professor: String
  rateMyProfessorRating: Float
  startTime: String
  title: String
}

input UpdateClassScheduleInput {
  id: Int!
  semesterId: String
}

input UpdateDegreeInput {
  id: Int!
  name: String
  numberOfCores: Int
  numberOfElectives: Int
}

input UpdateDegreeScheduleInput {
  id: Int!
  semesterId: String
}

input UpdateTaskFields {
  classCode: String
  description: String
  dueDate: String
  id: Int!
  stageId: Int
  title: String
}

input UpdateTaskInput {
  id: Int!
  update: UpdateTaskFields
}

type User {
  assignmentCompletionPercentage: Float
  attendancePercentage: Float
  classSchedules: [ClassSchedule]
  degree: Degree
  degreeId: Int
  degreeSchedules: [DegreeSchedule]
  email: String!
  gpa: Float
  id: String!
  tasks: [Task]
  university: String
  yearInUniversity: Int
}